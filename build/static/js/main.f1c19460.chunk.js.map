{"version":3,"sources":["Editor.js","index.js"],"names":["CustomEditor","isBoldMarkActive","editor","_Editor$nodes","Editor","nodes","match","n","bold","universal","Object","slicedToArray","isCodeBlockActive","_Editor$nodes3","type","toggleBoldMark","isActive","Transforms","setNodes","Text","isText","split","toggleCodeBlock","isBlock","Leaf","props","react_default","a","createElement","assign","attributes","style","fontWeight","leaf","children","CodeElement","DefaultElement","App","useMemo","withReact","createEditor","_useState","useState","text","_useState2","value","setValue","renderElement","useCallback","element","Editor_CodeElement","Editor_DefaultElement","renderLeaf","Editor_Leaf","dist_index_es","onChange","content","JSON","stringify","localStorage","setItem","onMouseDown","event","preventDefault","onKeyDown","ctrlKey","key","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8LASMA,EAAe,CACnBC,iBAAiBC,GAAQ,IAAAC,EACPC,IAAOC,MAAMH,EAAQ,CACnCI,MAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEC,MACdC,WAAW,IAGb,QANuBC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,OASzBS,kBAAkBV,GAAQ,IAAAW,EACRT,IAAOC,MAAMH,EAAQ,CACnCI,MAAO,SAAAC,GAAC,MAAe,SAAXA,EAAEO,QAGhB,QALwBJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,OAQ1BE,eAAeb,GACb,IAAMc,EAAWhB,EAAaC,iBAAiBC,GAC/Ce,IAAWC,SACThB,EACA,CAAEM,MAAMQ,GAAW,MACnB,CAAEV,MAAO,SAAAC,GAAC,OAAIY,IAAKC,OAAOb,IAAIc,OAAO,KAIzCC,gBAAgBpB,GACd,IAAMc,EAAWhB,EAAaY,kBAAkBV,GAChDe,IAAWC,SACThB,EACA,CAAEY,KAAME,EAAW,KAAO,QAC1B,CAAEV,MAAO,SAAAC,GAAC,OAAIH,IAAOmB,QAAQrB,EAAQK,QAmFrCiB,EAAO,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAAlB,OAAAmB,OAAA,GACMJ,EAAMK,WADZ,CAEEC,MAAO,CAAEC,WAAYP,EAAMQ,KAAKzB,KAAO,OAAS,YAE/CiB,EAAMS,WAMPC,EAAc,SAAAV,GAClB,OACEC,EAAAC,EAAAC,cAAA,MAASH,EAAMK,WACbJ,EAAAC,EAAAC,cAAA,YAAOH,EAAMS,YAKbE,EAAiB,SAAAX,GACrB,OAAOC,EAAAC,EAAAC,cAAA,IAAOH,EAAMK,WAAaL,EAAMS,WAG1BG,EAtGH,WACV,IAAMnC,EAASoC,kBAAQ,kBAAMC,YAAUC,gBAAiB,IADxCC,EAEUC,mBAAS,CACjC,CACE5B,KAAM,YACNoB,SAAU,CAAC,CAAES,KAAM,sCALPC,EAAAlC,OAAAC,EAAA,EAAAD,CAAA+B,EAAA,GAETI,EAFSD,EAAA,GAEFE,EAFEF,EAAA,GASVG,EAAgBC,sBAAY,SAAAvB,GAChC,OAAQA,EAAMwB,QAAQnC,MACpB,IAAK,OACH,OAAOY,EAAAC,EAAAC,cAACsB,EAAgBzB,GAC1B,QACE,OAAOC,EAAAC,EAAAC,cAACuB,EAAmB1B,KAE9B,IAEG2B,EAAaJ,sBAAY,SAAAvB,GAC7B,OAAOC,EAAAC,EAAAC,cAACyB,EAAS5B,IAChB,IAEH,OAEEC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEpD,OAAQA,EACR2C,MAAOA,EACPU,SAAU,SAAAV,GACRC,EAASD,GACT,IAAMW,EAAUC,KAAKC,UAAUb,GAC/Bc,aAAaC,QAAQ,UAAWJ,KAElC9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEiC,YAAa,SAAAC,GACXA,EAAMC,iBACN/D,EAAae,eAAeb,KAHhC,QAQAwB,EAAAC,EAAAC,cAAA,UACEiC,YAAa,SAAAC,GACXA,EAAMC,iBACN/D,EAAasB,gBAAgBpB,KAHjC,eASFwB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEpD,OAAQA,EACR6C,cAAeA,EACfK,WAAYA,EACZY,UAAW,SAAAF,GACT,GAAKA,EAAMG,QAIX,OAAQH,EAAMI,KACZ,IAAK,IACHJ,EAAMC,iBACN/D,EAAasB,gBAAgBpB,GAC7B,MAGF,IAAK,IACH4D,EAAMC,iBACN/D,EAAae,eAAeb,SC7GpCiE,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO7C,EAAAC,EAAAC,cAACxB,EAAD,MAAY+D","file":"static/js/main.f1c19460.chunk.js","sourcesContent":["// Import React dependencies.\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\n// Import the Slate editor factory.\r\nimport { createEditor, Editor, Text, Transforms } from \"slate\";\r\n\r\n// Import the Slate components and React plugin.\r\nimport { Slate, Editable, withReact } from \"slate-react\";\r\n\r\n// Define our own custom set of helpers.\r\nconst CustomEditor = {\r\n  isBoldMarkActive(editor) {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: n => n.bold === true,\r\n      universal: true,\r\n    })\r\n\r\n    return !!match\r\n  },\r\n\r\n  isCodeBlockActive(editor) {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: n => n.type === 'code',\r\n    })\r\n\r\n    return !!match\r\n  },\r\n\r\n  toggleBoldMark(editor) {\r\n    const isActive = CustomEditor.isBoldMarkActive(editor)\r\n    Transforms.setNodes(\r\n      editor,\r\n      { bold: isActive ? null : true },\r\n      { match: n => Text.isText(n), split: true }\r\n    )\r\n  },\r\n\r\n  toggleCodeBlock(editor) {\r\n    const isActive = CustomEditor.isCodeBlockActive(editor)\r\n    Transforms.setNodes(\r\n      editor,\r\n      { type: isActive ? null : 'code' },\r\n      { match: n => Editor.isBlock(editor, n) }\r\n    )\r\n  },\r\n}\r\n\r\nconst App = () => {\r\n  const editor = useMemo(() => withReact(createEditor()), [])\r\n  const [value, setValue] = useState([\r\n    {\r\n      type: 'paragraph',\r\n      children: [{ text: 'A line of text in a paragraph.' }],\r\n    },\r\n  ])\r\n\r\n  const renderElement = useCallback(props => {\r\n    switch (props.element.type) {\r\n      case 'code':\r\n        return <CodeElement {...props} />\r\n      default:\r\n        return <DefaultElement {...props} />\r\n    }\r\n  }, [])\r\n\r\n  const renderLeaf = useCallback(props => {\r\n    return <Leaf {...props} />\r\n  }, [])\r\n\r\n  return (\r\n    // Add a toolbar with buttons that call the same methods.\r\n    <Slate \r\n      editor={editor} \r\n      value={value} \r\n      onChange={value => {\r\n        setValue(value)\r\n        const content = JSON.stringify(value)\r\n        localStorage.setItem('content', content)\r\n        }}>\r\n      <div>\r\n        <button\r\n          onMouseDown={event => {\r\n            event.preventDefault()\r\n            CustomEditor.toggleBoldMark(editor)\r\n          }}\r\n        >\r\n          Bold\r\n        </button>\r\n        <button\r\n          onMouseDown={event => {\r\n            event.preventDefault()\r\n            CustomEditor.toggleCodeBlock(editor)\r\n          }}\r\n        >\r\n          Code Block\r\n        </button>\r\n      </div>\r\n      <Editable\r\n        editor={editor}\r\n        renderElement={renderElement}\r\n        renderLeaf={renderLeaf}\r\n        onKeyDown={event => {\r\n          if (!event.ctrlKey) {\r\n            return\r\n          }\r\n\r\n          switch (event.key) {\r\n            case '`': {\r\n              event.preventDefault()\r\n              CustomEditor.toggleCodeBlock(editor)\r\n              break\r\n            }\r\n\r\n            case 'b': {\r\n              event.preventDefault()\r\n              CustomEditor.toggleBoldMark(editor)\r\n              break\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </Slate>\r\n  )\r\n}\r\n\r\nconst Leaf = props => {\r\n  return (\r\n    <span\r\n      {...props.attributes}\r\n      style={{ fontWeight: props.leaf.bold ? 'bold' : 'normal' }}\r\n    >\r\n      {props.children}\r\n    </span>\r\n  )\r\n}\r\n\r\n// Define a React component renderer for our code blocks.\r\nconst CodeElement = props => {\r\n  return (\r\n    <pre {...props.attributes}>\r\n      <code>{props.children}</code>\r\n    </pre>\r\n  )\r\n}\r\n\r\nconst DefaultElement = props => {\r\n  return <p {...props.attributes}>{props.children}</p>\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Editor from \"./Editor\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<Editor />, rootElement);\r\n"],"sourceRoot":""}